// File generated by FlutterFire CLI.
// ignore_for_file: type=lint

// Importing Firebase core package to access FirebaseOptions
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;

// Importing Flutter foundation to detect the platform (e.g., Android, iOS, Web)
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// This class allows you to easily choose the correct Firebase configuration
/// based on the platform (Web, Android, iOS, etc.).
///
/// Example usage:
/// ```dart
/// import 'firebase_options.dart';
/// // Initialize Firebase using the correct platform config
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  /// Returns the [FirebaseOptions] appropriate for the platform your app is running on.
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      // If running on the web, return web-specific config
      return web;
    }
    // For non-web platforms, return config based on platform type
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
      // Linux not configured â€“ instruct user to rerun FlutterFire CLI
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
      // Catch-all in case of an unexpected platform
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Configuration for Web platform
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyB1Cd9lZxOM992ikMWtrYntyOmhxJSZgJE',
    appId: '1:627813978054:web:34e367383b081480922cc7',
    messagingSenderId: '627813978054',
    projectId: 'assignment-273b5',
    authDomain: 'assignment-273b5.firebaseapp.com',
    storageBucket: 'assignment-273b5.firebasestorage.app',
  );

  /// Configuration for Android platform
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCXB8KMMl3yzXYQhLpg1Ur1PQslGm7HbVQ',
    appId: '1:627813978054:android:8d4891db73570b68922cc7',
    messagingSenderId: '627813978054',
    projectId: 'assignment-273b5',
    storageBucket: 'assignment-273b5.firebasestorage.app',
  );

  /// Configuration for iOS platform
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCyHLHRu9tDHj9tDFgPbdP50GwIpZPbBxI',
    appId: '1:627813978054:ios:a1b5edf5bc8dabda922cc7',
    messagingSenderId: '627813978054',
    projectId: 'assignment-273b5',
    storageBucket: 'assignment-273b5.firebasestorage.app',
    iosBundleId: 'com.example.ass', // Must match iOS bundle identifier in Xcode
  );

  /// Configuration for macOS platform (same as iOS for this project)
  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCyHLHRu9tDHj9tDFgPbdP50GwIpZPbBxI',
    appId: '1:627813978054:ios:a1b5edf5bc8dabda922cc7',
    messagingSenderId: '627813978054',
    projectId: 'assignment-273b5',
    storageBucket: 'assignment-273b5.firebasestorage.app',
    iosBundleId: 'com.example.ass',
  );

  /// Configuration for Windows platform (same as web in this case)
  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyB1Cd9lZxOM992ikMWtrYntyOmhxJSZgJE',
    appId: '1:627813978054:web:67bf3b540455c97d922cc7',
    messagingSenderId: '627813978054',
    projectId: 'assignment-273b5',
    authDomain: 'assignment-273b5.firebaseapp.com',
    storageBucket: 'assignment-273b5.firebasestorage.app',
  );
}
